// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oJPbG6dAnddYXsmAzBHhSC
// Component: K9b1BPlQOtEee
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import CopyableLink from "../../CopyableLink"; // plasmic-import: CmYzwBVy-6EQR/component
import { FollowWrapper } from "@plasmicpkgs/react-twitter-widgets"; // plasmic-import: zqQBieQcfl/codeComponent
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import Button from "../../Button"; // plasmic-import: 8zu6vrMj23k/component

import { useScreenVariants as useScreenVariantsieEJs1Aww8Cnm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ieEJs1AWW8CNM/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_minimalist_about_me_page.module.css"; // plasmic-import: oJPbG6dAnddYXsmAzBHhSC/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: K9b1BPlQOtEee/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 5OIhz-Qd9Sldi/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: JCAQvJp6WRGon/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: Q2AYx03TCWo/icon
import ChecksvgIcon from "../portfolio/icons/PlasmicIcon__Checksvg"; // plasmic-import: 6cGBE7yn7YN/icon
import Icon4Icon from "../portfolio/icons/PlasmicIcon__Icon4"; // plasmic-import: w-BOWcKuYgL/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  copyableLink?: p.Flex<typeof CopyableLink>;
  follow?: p.Flex<typeof FollowWrapper>;
  background2?: p.Flex<"div">;
  copy?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsieEJs1Aww8Cnm()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__t3Xtz)}>
            <div className={classNames(projectcss.all, sty.freeBox__zfUIn)} />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wwuvh)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__v788)}>
                <div className={classNames(projectcss.all, sty.freeBox__kJeYz)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__ccztA)}
                    damping={0.8 as const}
                    triggerOnce={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fvvXo
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"Luc"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF" }}
                        >
                          {"as"}
                        </span>
                        <React.Fragment>{" Ly"}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </Reveal>

                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__isrc)}
                    triggerOnce={true}
                  >
                    <Tilt
                      className={classNames("__wab_instance", sty.tilt__vbAlj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jitT7
                        )}
                      >
                        {"I design prototypes meant to impress."}
                      </div>
                    </Tilt>
                  </Reveal>

                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__h0EN5)}
                    damping={1 as const}
                    triggerOnce={true}
                  >
                    <Tilt
                      className={classNames("__wab_instance", sty.tilt__wiNzN)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gzFsh
                        )}
                      >
                        {"I design the breath taker"}
                      </div>
                    </Tilt>
                  </Reveal>

                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__osO05)}
                    damping={1.5 as const}
                    triggerOnce={true}
                  >
                    <Tilt
                      className={classNames("__wab_instance", sty.tilt___9A1AK)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bct7
                        )}
                      >
                        {"I design the perfect."}
                      </div>
                    </Tilt>
                  </Reveal>
                </div>
              </div>

              <Reveal
                className={classNames("__wab_instance", sty.reveal__paJcz)}
                damping={0.8 as const}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__l9KXl)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ukrbe)}
                  >
                    <CopyableLink
                      data-plasmic-name={"copyableLink"}
                      data-plasmic-override={overrides.copyableLink}
                      className={classNames("__wab_instance", sty.copyableLink)}
                    >
                      {"lucas@crative.net"}
                    </CopyableLink>
                  </div>

                  <FollowWrapper
                    data-plasmic-name={"follow"}
                    data-plasmic-override={overrides.follow}
                    className={classNames("__wab_instance", sty.follow)}
                    large={false}
                    username={"LucasLyLee" as const}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vIFyk)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kSnuL)}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__rDvWt
                        )}
                        component={Link}
                        href={"https://twitter.com/LucasLyLee" as const}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__qyIk)}
                          role={"img"}
                        />
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__jeWgh
                        )}
                        component={Link}
                        href={"https://github.com/LucasLy" as const}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__anWku)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    </p.Stack>
                  </p.Stack>
                </div>
              </Reveal>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__qEbx2)} />
          </div>

          <Tilt className={classNames("__wab_instance", sty.tilt__l44D)}>
            <Reveal
              className={classNames("__wab_instance", sty.reveal__waLaV)}
              triggerOnce={true}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___4QrDf)}
                displayHeight={"65px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/minimalist_about_me_page/images/_2024208Jpg.jpeg",
                  fullWidth: 2560,
                  fullHeight: 1600,
                  aspectRatio: undefined
                }}
              />
            </Reveal>
          </Tilt>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__nmr27
            )}
            component={Link}
            href={"https://lucas-terminal.vercel.app/" as const}
            platform={"nextjs"}
            target={"_blank" as const}
          >
            <Reveal
              className={classNames("__wab_instance", sty.reveal___7YvLx)}
              triggerOnce={true}
            >
              <button
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button__ck65Q
                )}
              >
                {"Click Me"}
              </button>
            </Reveal>
          </p.PlasmicLink>

          <Reveal
            className={classNames("__wab_instance", sty.reveal__fk8DK)}
            triggerOnce={true}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ehCq4)} />
          </Reveal>

          <div className={classNames(projectcss.all, sty.columns__jxj7B)}>
            <div className={classNames(projectcss.all, sty.column__rg1Rt)}>
              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax__uNnOj
                )}
                speed={20 as const}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1___1YipE
                  )}
                >
                  {"#!!?S# Who are you!?"}
                </h1>
              </ParallaxWrapper>

              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax__saxLc
                )}
                speed={20 as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wR37
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {"Hello, I'm Lucas Ly. I am a 13-year-old student from "}
                    </React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__vVb2
                        )}
                        component={Link}
                        href={"https://goo.gl/maps/9Pmy4Df2WHUBcjEh7" as const}
                        platform={"nextjs"}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#A700FF" }}
                          >
                            {"Sweden"}
                          </span>
                        </React.Fragment>
                      </p.PlasmicLink>
                    }
                    <React.Fragment>
                      {
                        " who builds websites, web applications, and web prototypes to develop my innovation.\n I construct websites in the hopes of setting a new benchmark. how to create websites today. A novel approach to understanding the psychology of websites. Welcome to my website."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </ParallaxWrapper>

              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax__zo1Jc
                )}
                speed={20 as const}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__k6V6Q)}
                />
              </ParallaxWrapper>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tsVwA
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__kxbEb
                      )}
                    >
                      {"What I value as a web designer."}
                    </h1>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>

              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___3JJ5Z)}
                >
                  <ParallaxWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.scrollParallax___4KNR
                    )}
                    speed={20 as const}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mY1M)}
                    >
                      <Tilt
                        className={classNames(
                          "__wab_instance",
                          sty.tilt__aTnG7
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dHSi4
                          )}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nRu1O
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__fjD0O
                                )}
                              >
                                <Icon14Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__cfGzE
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__p1Jga
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dwnFl
                              )}
                            >
                              {"Psychology"}
                            </div>
                          </div>
                        </p.Stack>
                      </Tilt>

                      <Tilt
                        className={classNames(
                          "__wab_instance",
                          sty.tilt___1CQdP
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uaSiv
                          )}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__p7Scu
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dtXn
                                )}
                              >
                                <Icon14Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__z9Ozj
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__amuVf
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___43Riu
                              )}
                            >
                              {"Design"}
                            </div>
                          </div>
                        </p.Stack>
                      </Tilt>

                      <Tilt
                        className={classNames("__wab_instance", sty.tilt__bp7O)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lYznt
                          )}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___2ZV07
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jhd8E
                                )}
                              >
                                <Icon14Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__aN2Vq
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0M3Q
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iqqJf
                              )}
                            >
                              {"Functionality"}
                            </div>
                          </div>
                        </p.Stack>
                      </Tilt>

                      <Tilt
                        className={classNames(
                          "__wab_instance",
                          sty.tilt__jGpIx
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__n9Abr
                          )}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__owjuJ
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vm1Tz
                                )}
                              >
                                <Icon14Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___01R4X
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__usYr
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ou039
                              )}
                            >
                              {"Navigation"}
                            </div>
                          </div>
                        </p.Stack>
                      </Tilt>

                      <Tilt
                        className={classNames(
                          "__wab_instance",
                          sty.tilt__j1Rzq
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__umMXy
                          )}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tKaO9
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ffNw1
                                )}
                              >
                                <Icon14Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___0SvjG
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__m0Ufv
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wcZk3
                              )}
                            >
                              {"Persuasion"}
                            </div>
                          </div>
                        </p.Stack>
                      </Tilt>
                    </p.Stack>
                  </ParallaxWrapper>
                </div>
              ) : null}

              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax__zCb4
                )}
                speed={20 as const}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___371Bp)}
                />
              </ParallaxWrapper>

              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__uEjft
                )}
              >
                {"My work"}
              </h1>

              <div className={classNames(projectcss.all, sty.freeBox__khz7R)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__g7XtX)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__jOnYv)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__lrNdV)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__eOnao)}
                        displayHeight={"100%" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"320px" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        src={{
                          src: "/plasmic/portfolio/images/imagepng.png",
                          fullWidth: 2560,
                          fullHeight: 1357,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        data-plasmic-name={"background2"}
                        data-plasmic-override={overrides.background2}
                        className={classNames(projectcss.all, sty.background2)}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__t8Cd)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xqyZa
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"copy"}
                          data-plasmic-override={overrides.copy}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.copy)}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iew9
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bleAp
                              )}
                            >
                              {"2023"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bH5P8
                              )}
                            >
                              {"Crative.net"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aZny8
                              )}
                            >
                              {
                                "Lucas Ly with help from Elliot and trende2001 founded Crative in 2023 as a network for developers to share their work.\nCrative serves as an intermediary to demonstrate a developer's employment to a recruiter because it may be utilized as a developer recruiting solution.\nCurrently, one of the newest networks for developers created for hiring and exhibiting is called Crative."
                              }
                            </div>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eiNv
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button___1Ynl7
                              )}
                              color={"blue" as const}
                              endIcon={
                                <Icon4Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___0Wj6H
                                  )}
                                  role={"img"}
                                />
                              }
                              link={"https://crative.net" as const}
                              startIcon={
                                <ChecksvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__x1XgJ
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8M8Ut
                                )}
                              >
                                {"Visit ->"}
                              </div>
                            </Button>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </div>
                  </div>
                </p.Stack>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__jKoZw)} />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__urTYp
            )}
          >
            {"2023"}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "copyableLink", "follow", "background2", "copy"],
  copyableLink: ["copyableLink"],
  follow: ["follow"],
  background2: ["background2"],
  copy: ["copy"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  copyableLink: typeof CopyableLink;
  follow: typeof FollowWrapper;
  background2: "div";
  copy: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copyableLink: makeNodeComponent("copyableLink"),
    follow: makeNodeComponent("follow"),
    background2: makeNodeComponent("background2"),
    copy: makeNodeComponent("copy"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Lucas Ly - ",
      description: "I design prototypes meant to impress.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
