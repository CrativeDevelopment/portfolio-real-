// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oJPbG6dAnddYXsmAzBHhSC
// Component: K9b1BPlQOtEee
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import CopyableLink from "../../CopyableLink"; // plasmic-import: CmYzwBVy-6EQR/component

import { useScreenVariants as useScreenVariantsieEJs1Aww8Cnm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ieEJs1AWW8CNM/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_minimalist_about_me_page.module.css"; // plasmic-import: oJPbG6dAnddYXsmAzBHhSC/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: K9b1BPlQOtEee/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 5OIhz-Qd9Sldi/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: JCAQvJp6WRGon/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: Q2AYx03TCWo/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  copyableLink?: p.Flex<typeof CopyableLink>;
  img?: p.Flex<typeof p.PlasmicImg>;
  columns?: p.Flex<"div">;
  column?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsieEJs1Aww8Cnm()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__t3Xtz)}>
            <div className={classNames(projectcss.all, sty.freeBox__zfUIn)} />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wwuvh)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__v788)}>
                <div className={classNames(projectcss.all, sty.freeBox__kJeYz)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fvvXo
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Luc"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"as"}
                      </span>
                      <React.Fragment>{" Ly"}</React.Fragment>
                    </React.Fragment>
                  </div>

                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__isrc)}
                    triggerOnce={true}
                  >
                    <Tilt
                      className={classNames("__wab_instance", sty.tilt__vbAlj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jitT7
                        )}
                      >
                        {"I design prototypes meant to impress."}
                      </div>
                    </Tilt>
                  </Reveal>

                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__h0EN5)}
                    damping={1 as const}
                    triggerOnce={true}
                  >
                    <Tilt
                      className={classNames("__wab_instance", sty.tilt__wiNzN)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gzFsh
                        )}
                      >
                        {"I design the breath taker"}
                      </div>
                    </Tilt>
                  </Reveal>

                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__osO05)}
                    damping={1.5 as const}
                    triggerOnce={true}
                  >
                    <Tilt
                      className={classNames("__wab_instance", sty.tilt___9A1AK)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bct7
                        )}
                      >
                        {"I design the perfect."}
                      </div>
                    </Tilt>
                  </Reveal>
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__l9KXl)}>
                <div className={classNames(projectcss.all, sty.freeBox__ukrbe)}>
                  <CopyableLink
                    data-plasmic-name={"copyableLink"}
                    data-plasmic-override={overrides.copyableLink}
                    className={classNames("__wab_instance", sty.copyableLink)}
                  >
                    {"lucas@crative.net"}
                  </CopyableLink>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vIFyk)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kSnuL)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__rDvWt
                      )}
                      component={Link}
                      href={"https://twitter.com/LucasLyLee" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__qyIk)}
                        role={"img"}
                      />
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__jeWgh
                      )}
                      component={Link}
                      href={"https://github.com/LucasLy" as const}
                      platform={"nextjs"}
                      target={"_blank" as const}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__anWku)}
                        role={"img"}
                      />
                    </p.PlasmicLink>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__qEbx2)} />
          </div>

          <Tilt className={classNames("__wab_instance", sty.tilt__l44D)}>
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"65px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/minimalist_about_me_page/images/_2024208Jpg.jpeg",
                fullWidth: 2560,
                fullHeight: 1600,
                aspectRatio: undefined
              }}
            />
          </Tilt>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__x16Oc
            )}
          >
            {"Lucas Ly - work in progress"}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__ehCq4)} />

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div
              data-plasmic-name={"column"}
              data-plasmic-override={overrides.column}
              className={classNames(projectcss.all, sty.column)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1___1YipE
                )}
              >
                {"#!!?S# Who are you!?"}
              </h1>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wR37
                )}
              >
                {
                  "Hello, I'm Lucas Ly. I am a 13-year-old student from Sweden who builds websites, web applications, and web prototypes to develop my innovation. I construct websites in the hopes of setting a new benchmark. how to create websites today. A novel approach to understanding the psychology of websites. Welcome to my website."
                }
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__k6V6Q)} />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tsVwA
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__kxbEb
                      )}
                    >
                      {"What I value as a web designer."}
                    </h1>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>

              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___3JJ5Z)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mY1M)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dHSi4)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nRu1O
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fjD0O
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__cfGzE
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lAu90
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gg45J
                          )}
                        >
                          {"Simple"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__p1Jga
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dwnFl
                          )}
                        >
                          {"Psychology"}
                        </div>
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uaSiv)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__p7Scu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dtXn
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__z9Ozj
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hQmJ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7MoTf
                          )}
                        >
                          {"Blazing fast"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__amuVf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___43Riu
                          )}
                        >
                          {"Design"}
                        </div>
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lYznt)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2ZV07
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jhd8E
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__aN2Vq
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nSfFx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nlTf
                          )}
                        >
                          {"Collaborative"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0M3Q
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iqqJf
                          )}
                        >
                          {"Functionality"}
                        </div>
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__n9Abr)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__owjuJ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vm1Tz
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___01R4X
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xaVcQ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4B2Bl
                          )}
                        >
                          {"Powerful"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__usYr
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ou039
                          )}
                        >
                          {"Navigation"}
                        </div>
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__umMXy)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tKaO9
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ffNw1
                            )}
                          >
                            <Icon14Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0SvjG
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zlpkp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__axZzb
                          )}
                        >
                          {"Enterprise-ready"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__m0Ufv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wcZk3
                          )}
                        >
                          {"Persuasion"}
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </div>
              ) : null}
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__jKoZw)} />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "copyableLink", "img", "columns", "column"],
  copyableLink: ["copyableLink"],
  img: ["img"],
  columns: ["columns", "column"],
  column: ["column"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  copyableLink: typeof CopyableLink;
  img: typeof p.PlasmicImg;
  columns: "div";
  column: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copyableLink: makeNodeComponent("copyableLink"),
    img: makeNodeComponent("img"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Lucas Ly - ",
      description: "I design prototypes meant to impress.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
